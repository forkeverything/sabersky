{"version":3,"sources":["items/all.js","line-items/add.js","projects/add.js","purchase-orders/all.js","purchase-orders/submit.js","purchase-requests/all.js","purchase-requests/make.js","settings/show.js","settings/partials/company.js","settings/partials/permissions.js","settings/partials/rules.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChztpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpjfile":"page.js","sourcesContent":["Vue.component('items-all', {\n    name: 'allItems',\n    el: function() {\n        return '#items-all';\n    },\n    data: function() {\n        return {\n            items: []\n        };\n    },\n    computed: {\n        itemNames: function() {\n            var names = [];\n            _.forEach(this.items, function (item) {\n                names.push(item.name);\n            });\n            return names;\n        }\n    },\n    ready: function() {\n        var self = this;\n        $.ajax({\n            url: '/api/items',\n            method: 'GET',\n            success: function(data) {\n                self.items = data;\n            },\n            error: function(err) {\n                console.log(err);\n            }\n        })\n    }\n});","Vue.component('add-line-item', {\n    name: 'addLineItem',\n    el: function () {\n        return '#add-line-item';\n    },\n    data: function () {\n        return {\n            purchaseRequests: [],\n            selectedPurchaseRequest: '',\n            quantity: '',\n            price: '',\n            payable: '',\n            delivery: '',\n            canAjax: true,\n            field: '',\n            order: '',\n            urgent: ''\n        };\n    },\n    ready: function () {\n        var self = this;\n        $.ajax({\n            method: 'GET',\n            url: '/api/purchase_requests/available',\n            success: function (data) {\n                self.purchaseRequests = data;\n            }\n        });\n    },\n    methods: {\n        selectPurchaseRequest: function ($selected) {\n            this.selectedPurchaseRequest = $selected;\n        },\n        removeSelectedPurchaseRequest: function () {\n            this.selectedPurchaseRequest = '';\n            this.quantity = '';\n            this.price = '';\n            this.payable = '';\n            this.delivery = '';\n        },\n        addLineItem: function () {\n            var self = this;\n            if (self.canAjax) {\n                self.canAjax = false;\n                $.ajax({\n                    url: '/purchase_orders/add_line_item',\n                    method: 'POST',\n                    data: {\n                        purchase_request_id: self.selectedPurchaseRequest.id,\n                        quantity: self.quantity,\n                        price: self.price,\n                        payable: moment(self.payable, \"DD/MM/YYYY\").format(\"YYYY-MM-DD H:mm:ss\"),\n                        delivery: moment(self.delivery, \"DD/MM/YYYY\").format(\"YYYY-MM-DD H:mm:ss\")\n                    },\n                    success: function (data) {\n                        window.location = '/purchase_orders/submit';\n                    },\n                    error: function (res, status, error) {\n                        console.log(res);\n                        self.canAjax = true;\n                    }\n                });\n            }\n        },\n        changeSort: function ($newField) {\n            if (this.field == $newField) {\n                this.order = (this.order == '') ? -1 : '';\n            } else {\n                this.field = $newField;\n                this.order = ''\n            }\n        },\n        toggleUrgent: function () {\n            this.urgent = (this.urgent) ? '' : 1;\n        }\n    },\n    computed: {\n        subtotal: function () {\n            return this.quantity * this.price;\n        },\n        validQuantity: function () {\n            return (this.selectedPurchaseRequest.quantity >= this.quantity && this.quantity > 0);\n        },\n        canAddPurchaseRequest: function () {\n            return (!!this.selectedPurchaseRequest && !!this.quantity & !!this.price && !!this.payable && !!this.delivery && this.validQuantity)\n        }\n    }\n});\n\n\n","Vue.component('projects-add-team', {\n    name: 'projectAddTeam',\n    el: function() {\n        return '#projects-team-add'\n    },\n    data: function() {\n        return {\n            ajaxReady: true,\n            roles: []\n        };\n    },\n    props: [],\n    computed: {\n\n    },\n    methods: {\n\n    },\n    events: {\n\n    },\n    ready: function() {\n        var self = this;\n        if(!self.ajaxReady) return;\n        self.ajaxReady = false;\n        $.ajax({\n            url: '/api/roles',\n            method: 'GET',\n            success: function(data) {\n               // success\n               self.roles = data;\n               self.ajaxReady = true;\n            },\n            error: function(response) {\n                console.log(response);\n\n                vueValidation(response, self);\n                self.ajaxReady = true;\n            }\n        });\n    }\n});","Vue.component('purchase-orders-all',{\n    name: 'allPurchaseOrders',\n    el: function() {\n        return '#purchase-orders-all';\n    },\n    data: function() {\n        return {\n            purchaseOrders: [],\n            headings: [\n                ['created_at', 'Date Submitted'],\n                ['project.name', 'Project'],\n                ['', 'Item(s)'],\n                ['total', 'OrderTotal'],\n                ['', 'Status'],\n                ['', 'Paid'],\n                ['', 'Delivered']\n            ],\n            statuses: [\n                {\n                    key: 'pending',\n                    label: 'Pending'\n                },\n                {\n                    key: 'approved',\n                    label: 'Approved'\n                },\n                {\n                    key: 'rejected',\n                    label: 'Rejected'\n                },\n                {\n                    key: '',\n                    label: 'All'\n                }\n            ],\n            field: '',\n            order: '',\n            urgent: '',\n            filter: 'pending'\n        };\n    },\n    ready: function () {\n        var self = this;\n        $.ajax({\n            url: '/api/purchase_orders',\n            method: 'GET',\n            success: function (data) {\n                self.purchaseOrders = data;\n            },\n            error: function (data) {\n                console.log(data);\n            }\n        });\n    },\n    methods: {\n        changeSort: function ($newField) {\n            if (this.field == $newField) {\n                this.order = (this.order == '') ? -1 : '';\n            } else {\n                this.field = $newField;\n                this.order = ''\n            }\n        },\n        checkUrgent: function (purchaseOrder) {\n            // takes a purchaseOrder and sees\n            // if there are any PR's with urgent tags\n            var urgent = false;\n            _.forEach(purchaseOrder.line_items, function (item) {\n                if (item.purchase_request.urgent) {\n                    urgent = true;\n                }\n            });\n            return urgent;\n        },\n        changeFilter: function (filter) {\n            this.filter = filter;\n        },\n        toggleUrgent: function () {\n            this.urgent = (this.urgent) ? '' : 1;\n        },\n        loadSinglePO: function (POID) {\n            window.document.location = '/purchase_orders/single/' + POID;\n        },\n        checkProperty: function (purchaseOrder, property) {\n            var numLineItems = purchaseOrder.line_items.length;\n            var numTrueForProperty = 0;\n            _.forEach(purchaseOrder.line_items, function (item) {\n                item[property] ? numTrueForProperty++ : '';\n            });\n            if (numLineItems == numTrueForProperty) {\n                return true;\n            }\n        }\n    }\n});","Vue.component('purchase-orders-submit', {\n    el: function() {\n        return '#purchase-orders-submit';\n    },\n    data: function() {\n        return {\n            vendorType: '',\n            vendor_id: 'Choose an existing vendor',\n            name: '',\n            phone: '',\n            address: '',\n            bank_account_name: '',\n            bank_account_number: '',\n            bank_name: '',\n            canAjax: true\n        };\n    },\n    computed: {\n        readyStep3: function () {\n            return (this.vendor_id !== 'Choose an existing vendor' || this.name.length > 0 && this.phone.length > 0 && this.address.length > 0 && this.bank_account_name.length > 0 && this.bank_account_number.length > 0 && this.bank_name.length > 0);\n        }\n    },\n    methods: {\n        selectVendor: function (type) {\n            this.vendor_id = 'Choose an existing vendor';\n            this.name = '';\n            this.phone = '';\n            this.address = '';\n            this.bank_account_name = '';\n            this.bank_account_number = '';\n            this.bank_name = '';\n            this.vendorType = type;\n        },\n        removeLineItem: function (lineItemId) {\n            console.log('hehehe');\n            var self = this;\n            if (self.canAjax) {\n                self.canAjax = false;\n                $.ajax({\n                    url: '/purchase_orders/remove_line_item/' + lineItemId,\n                    method: 'POST',\n                    data: {},\n                    success: function (data) {\n                        console.log('success');\n                        window.location = '/purchase_orders/submit';\n                    },\n                    error: function (res, status, error) {\n                        console.log(error);\n                        self.canAjax = true;\n                    }\n                });\n            }\n        }\n    }\n});","Vue.component('purchase-requests-all', {\n    name: 'allPurchaseRequests',\n    el: function() {\n        return '#purchase-requests-all';\n    },\n    data: function() {\n        return {\n            purchaseRequests: [],\n            headings: [\n                ['due', 'Due Date'],\n                ['project.name', 'Project'],\n                ['item.name', 'Item'],\n                ['specification', 'Specification'],\n                ['quantity', 'Quantity'],\n                ['user.name', 'Made by'],\n                ['created_at', 'Requested']\n            ],\n            field: '',\n            order: '',\n            urgent: '',\n            filter: ''\n        };\n    },\n    ready: function () {\n        var self = this;\n        $.ajax({\n            url: '/api/purchase_requests',\n            method: 'GET',\n            success: function (data) {\n                self.purchaseRequests = data;\n            },\n            error: function (res, status, req) {\n                console.log(status);\n            }\n        });\n    },\n    methods: {\n        loadSinglePR: function (id) {\n            window.document.location = '/purchase_requests/single/' + id;\n        },\n        changeSort: function ($newField) {\n            if (this.field == $newField) {\n                this.order = (this.order == '') ? -1 : '';\n            } else {\n                this.field = $newField;\n                this.order = ''\n            }\n        },\n        toggleUrgent: function () {\n            this.urgent = (this.urgent) ? '' : 1;\n        },\n        changeFilter: function (filter) {\n            this.filter = filter;\n        },\n        checkShow: function (purchaseRequest) {\n            switch (this.filter) {\n                case 'complete':\n                    console.log(purchaseRequest.state);\n                    if (purchaseRequest.state == 'Open' && purchaseRequest.quantity == '0') {\n                        return true;\n                    }\n                    break;\n                case 'cancelled':\n                    if (purchaseRequest.state == 'Cancelled') {\n                        return true;\n                    }\n                    break;\n                default:\n                    if (purchaseRequest.quantity > 0 && purchaseRequest.state !== 'Cancelled') {\n                        return true;\n                    }\n            }\n        }\n    }\n});","Vue.component('purchase-requests-make', {\n    name: 'makePurchaseRequest',\n    el: function() {\n        return '#purchase-requests-add';\n    },\n    data: function() {\n        return {\n            existingItem: true,\n            items: [],\n            existingItemName: '',\n            selectedItem: ''\n        };\n    },\n    methods: {\n        changeExistingItem: function (state) {\n            this.clearSelectedExisting();\n            this.existingItem = state;\n        },\n        selectItemName: function(name) {\n            this.existingItemName = name;\n        },\n        selectItem: function(item) {\n            this.selectedItem = item;\n        },\n        clearSelectedExisting: function() {\n            this.selectedItem = '';\n            this.existingItemName = '';\n            $('#select-new-item-name')[0].selectize.clear();\n            $('#field-new-item-specification').val('');\n            $('.input-item-photos').fileinput('clear');\n        }\n    },\n    computed: {\n        uniqueItemNames: function () {\n            return _.uniqBy(this.items, 'name');\n        },\n        itemsWithName: function () {\n            return _.filter(this.items, {'name': this.existingItemName});\n        }\n    },\n    ready: function () {\n        var self = this;\n        $.ajax({\n            url: '/api/items',\n            method: 'GET',\n            success: function (data) {\n                self.items = data;\n            }\n        });\n\n        var unique = $('#select-new-item-name').selectize({\n            create: true,\n            sortField: 'text',\n            placeholder: 'Choose an existing name or enter a new one...',\n            createFilter: function(input) {\n                input = input.toLowerCase();\n                var array = $.map(unique.options, function(value) {\n                    return [value];\n                });\n                var unmatched = true;\n                _.forEach(array, function (option) {\n                    if((option.text).toLowerCase() === input) {\n                        unmatched = false;\n                    }\n                });\n                return unmatched;\n            }\n        })[0].selectize;\n    },\n    compiled: function() {\n        $('#purchase-requests-add').show();\n    }\n});\n\n","Vue.component('settings', {\n    name: 'Settings',\n    el: function () {\n        return '#system-settings';\n    },\n    data: function () {\n        return {\n            settingsView: 'company',\n            navLinks: [\n                {\n                    label: 'Company',\n                    section: 'company'\n                },\n                {\n                    label: 'Permissions',\n                    section: 'permissions'\n                },\n                {\n                    label: 'Rules',\n                    section: 'rules'\n                }\n            ],\n            roles: []   // shared with Permissions, Rules\n        }\n    },\n    methods: {\n        changeView: function (view) {\n            this.settingsView = view;\n        }\n    },\n    components: {\n        settingsCompany: 'settings-company',\n        settingsPermissions: 'settings-permissions',\n        settingsRules: 'settings-rules'\n    }\n});\n","Vue.component('settings-company', {\n    name: 'settingsCompany',\n    template: '',\n    el: function () {\n        return '#settings-company';\n    },\n    data: function() {\n        return {\n            ajaxReady: true,\n            company: false\n        }\n    },\n    props: [\n      'settingsView'\n    ],\n    computed: {\n        canUpdateCompany: function () {\n            if (this.company) {\n                return this.company.name.length > 0 && this.company.description.length > 0 && this.company.currency.length > 0;\n            }\n            return false;\n        }\n    },\n    methods: {\n        updateCompany: function () {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/company',\n                method: 'PUT',\n                data: {\n                    name: self.company.name,\n                    description: self.company.description,\n                    currency: self.company.currency\n                },\n                success: function (data) {\n                    // success\n                    flashNotify('success', 'Updated Company information');\n                    self.$dispatch('update-company');\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                    vueValidation(response, self);\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    ready: function() {\n        var self = this;\n        // GET user company info\n        $.ajax({\n            url: '/api/company',\n            method: 'GET',\n            success: function (data) {\n                // success\n                self.company = data;\n            },\n            error: function (response) {\n                console.log('Request Error!');\n                console.log(response);\n            }\n        });\n\n    }\n});","Vue.component('settings-permissions', {\n    name: 'settingsPermissions',\n    el: function () {\n        return '#settings-permissions'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            roleToRemove: false,\n            roleSelect: '',\n            selectedRole: false,\n            editingRole: false,\n            editRolePosition: false,\n            roleToUpdate: {},\n            updatedRoleVal: ''\n        };\n    },\n    props: [\n        'roles',\n        'settingsView'\n    ],\n    computed: {},\n    methods: {\n        hasPermission: function (permission, role) {\n            return _.some(role.permissions, permission);\n        },\n        removePermission: function (permission, role) {\n            var self = this;\n            $.ajax({\n                url: '/api/roles/remove_permission',\n                method: 'POST',\n                data: {\n                    role: role,\n                    permission: permission\n                },\n                success: function () {\n                    // remove role from roles\n                    self.roles = _.reject(self.roles, role);\n                    // modify role\n                    role.permissions = _.reject(role.permissions, permission);\n                    // Add role back to roles\n                    self.roles.push(role);\n                },\n                error: function (response) {\n                    // error\n                    console.log('GET REQ Error!');\n                    console.log(response);\n                }\n            });\n        },\n        givePermission: function (permission, role) {\n            var self = this;\n            $.ajax({\n                url: '/api/roles/give_permission',\n                method: 'POST',\n                data: {\n                    role: role,\n                    permission: permission\n                },\n                success: function () {\n                    self.roles = _.reject(self.roles, role);\n                    role.permissions.push(permission);\n                    self.roles.push(role)\n                },\n                error: function (response) {\n                    // error\n                    console.log('GET REQ Error!');\n                    console.log(response);\n                }\n            });\n        },\n        addRole: function () {\n            var newRole = {};\n        },\n        setRemoveRole: function (role) {\n            this.$broadcast('new-modal', {\n                title: 'Permanently Remove ' + strCapitalize(role.position),\n                body: \"Removing a role is irreversible. Any team members that have those roles will lose all their permissions and won't be able to complete any tasks until you assign them a new role.\",\n                buttonClass: 'btn-danger',\n                buttonText: 'remove',\n                callbackEventName: 'remove-role'\n            });\n            this.roleToRemove = role;\n        },\n        removeRole: function () {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/roles/delete',\n                method: 'POST',\n                data: {\n                    role: self.roleToRemove\n                },\n                success: function (data) {\n                    // success\n                    self.roles = _.reject(self.roles, self.roleToRemove);\n                    // Remove from selectbox\n                    self.roleSelect.removeOption(self.roleToRemove.position);\n                    self.roleSelect.removeItem(self.roleToRemove.position, false);\n                    self.selectedRole = false;\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        editRole: function (role) {\n            var self = this;\n            self.editingRole = role;\n            self.editRolePosition = role.position;\n            self.$nextTick(function () {\n                var $inputEdit = $('.input-editing-role');\n                $inputEdit.focus();\n                var blurFired = false; // blur fired flag\n                $inputEdit.keypress(function (e) {\n                    if (e.which == 13) {\n                        this.blur();\n                    }\n                });\n                $inputEdit.blur(function () {\n                    var newRoleVal = $inputEdit.val().toLowerCase();\n                    if (blurFired) return;\n                    blurFired = true;\n                    if (newRoleVal !== role.position && newRoleVal.length !== 0) {\n                        self.confirmEdit(role, newRoleVal);\n                    }\n                    self.editingRole = false;\n                    self.editRolePosition = false;\n\n                });\n            });\n\n        },\n        notEditing: function (role) {\n            return role !== this.editingRole;\n        },\n        confirmEdit: function (oldRole, newRoleVal) {\n            this.roleToUpdate = oldRole;\n            this.updatedRoleVal = newRoleVal;\n            this.$broadcast('new-modal', {\n                title: 'Confirm Edit ' + strCapitalize(this.editingRole.position) + ' to ' + strCapitalize(newRoleVal),\n                body: 'Role changes are immediate and will automatically effect all team members that have the role.',\n                buttonClass: 'btn-primary',\n                buttonText: 'update',\n                callbackEventName: 'update-role'\n            });\n        },\n        updateRole: function () {\n            var self = this;\n            $.ajax({\n                url: '/api/roles/' + self.roleToUpdate.id,\n                method: 'PUT',\n                data: {\n                    role: self.roleToUpdate,\n                    newPosition: self.updatedRoleVal\n                },\n                success: function (role) {\n                    self.roles = _.reject(self.roles, self.roleToUpdate);\n                    self.roles.push(role);\n\n                    self.roleSelect.updateOption(self.roleToUpdate.position, {\n                        value: role.position,\n                        text: strCapitalize(role.position)\n                    });\n\n                    // select new option\n                    if (self.selectedRole.position === self.roleToUpdate.position) self.selectedRole = role;\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                }\n            });\n        }\n    },\n    events: {\n        'remove-role': function () {\n            this.removeRole();\n        },\n        'update-role': function () {\n            this.updateRole();\n        }\n    },\n    ready: function () {\n        var self = this;\n\n        // GET company roles\n        $.ajax({\n            url: '/api/roles',\n            method: 'GET',\n            success: function (data) {\n                self.roles = data;\n            },\n            error: function (err) {\n                console.log(err);\n            }\n        });\n\n        var $addRoleLink = $('#link-add-role');\n\n        $addRoleLink.editable({\n            type: 'text',\n            mode: 'inline',\n            showbuttons: false,\n            placeholder: 'Position Title'\n        });\n\n        $addRoleLink.on('shown', function () {\n            setTimeout(function () {\n                $addRoleLink.editable('setValue', '');\n            }, 0);\n        });\n\n        $addRoleLink.on('hidden', function (e, reason) {\n            $addRoleLink.editable('setValue', 'Add New Role');\n        });\n\n        function saveRole(position, successFn, errorFn) {\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/roles',\n                method: 'POST',\n                data: {\n                    position: position\n                },\n                success: function (data) {\n                    self.roles.push(data);\n                    successFn ? successFn() : null;\n                    self.ajaxReady = true;\n                },\n                error: function (res) {\n                    console.log('Error: saving new role');\n                    console.log(res);\n                    errorFn ? errorFn() : null;\n                    self.ajaxReady = true;\n                }\n            });\n        }\n\n        self.roleSelect = uniqueSelectize('#select-settings-role', 'Select or type to add a new role');\n\n        $addRoleLink.on('save', function (e, params) {\n            self.roleSelect.addOption({\n                value: params.newValue,\n                text: params.newValue\n            });\n        });\n\n        self.roleSelect.on(\"option_add\", function (value, $item) {\n            self.roleSelect.updateOption(value, {\n                value: value,\n                text: strCapitalize(value)\n            });\n\n            saveRole(value, function () {\n                // success\n                self.selectedRole = _.find(self.roles, {position: value});\n            }, function () {\n                // error:\n                self.roleSelect.removeOption(value);\n            });\n        });\n\n        self.roleSelect.on(\"item_add\", function (value, $item) {\n            self.selectedRole = _.find(self.roles, {position: value});\n        });\n    }\n});\n","Vue.component('settings-rules', {\n    name: 'settingsRules',\n    el: function () {\n        return '#settings-rules'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            rules: [],\n            ruleProperties: [],\n            selectedProperty: false,\n            selectedTrigger: false,\n            selectedRuleRoles: [],\n            ruleLimit: '',\n            ruleToRemove: false\n        };\n    },\n    props: [\n        'roles',\n        'settingsView'\n    ],\n    computed: {\n        ruleHasLimit: function () {\n            return (this.selectedTrigger && this.selectedTrigger.has_limit);\n        },\n        canSubmitRule: function () {\n            if (this.ruleHasLimit) {\n                if (this.selectedRuleRoles) {\n                    return this.selectedProperty && this.selectedTrigger && this.selectedRuleRoles.length > 0 && this.ruleLimit > 0;\n                }\n                return false;\n            }\n            return this.selectedProperty && this.selectedTrigger && this.selectedRuleRoles.length > 0;\n        },\n        hasRules: function () {\n            return !_.isEmpty(this.rules);\n        }\n    },\n    methods: {\n        setTriggers: function () {\n            this.selectedTrigger = '';\n        },\n        addRule: function () {\n            var self = this;\n            var postData = {\n                rule_property_id: self.selectedProperty.id,\n                rule_trigger_id: self.selectedTrigger.id,\n                limit: self.ruleLimit,\n                roles: self.selectedRuleRoles\n            };\n            $.ajax({\n                url: '/api/rules',\n                method: 'POST',\n                data: postData,\n                success: function (data) {\n                    // success\n                    self.fetchRules();\n                    flashNotify('success', 'Successfully added a new Rule');\n                    self.resetRuleValues();\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                    self.resetRuleValues();\n                    if (response.status === 409) {\n                        flashNotify('error', 'Rule already exists');\n                    } else {\n                        flashNotify('error', 'Could not add Rule');\n                    }\n\n                }\n            });\n        },\n        resetRuleValues: function () {\n            this.ruleLimit = '';\n            this.selectedRuleRoles = [];\n        },\n        setRemoveRule: function (rule) {\n            this.ruleToRemove = rule;\n            this.$broadcast('new-modal', {\n                title: 'Confirm Remove Rule',\n                body: \"Removing a rule is irreversible. Any Pending (Unapproved) Purchase Orders that is waiting for the Rule to be approved may automatically be approved for processing.\",\n                buttonClass: 'btn-danger',\n                buttonText: 'remove',\n                callbackEventName: 'remove-rule'\n            });\n        },\n        removeRule: function () {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/rules/' + self.ruleToRemove.id + '/remove',\n                method: 'DELETE',\n                success: function (data) {\n                    // success\n                    self.fetchRules();\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        fetchRules: function () {\n            var self = this;\n            $.ajax({\n                url: '/api/rules',\n                method: 'GET',\n                success: function (data) {\n                    // success\n                    self.rules = data;\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                }\n            });\n        }\n    },\n    events: {\n        'remove-rule': function () {\n            this.removeRule();\n        }\n    },\n    ready: function () {\n        var self = this;\n\n        $.ajax({\n            url: '/api/rules/properties_triggers',\n            method: 'GET',\n            success: function (data) {\n                // success\n                self.ruleProperties = data;\n            },\n            error: function (response) {\n                console.log('Request Error!');\n                console.log(response);\n            }\n        });\n\n        self.fetchRules();\n    }\n});"],"sourceRoot":"/source/"}