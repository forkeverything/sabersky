{"version":3,"sources":["items/all.js","items/single.js","line-items/add.js","projects/add.js","projects/all.js","projects/single.js","purchase-orders/all.js","purchase-orders/submit.js","purchase-requests/all.js","purchase-requests/make.js","settings/show.js","team/all.js","team/single-user.js","vendors/add-new.js","vendors/requests.js","vendors/single.js","settings/partials/company.js","settings/partials/permissions.js","settings/partials/rules.js","vendors/partials/vendor-add-search.js","vendors/partials/vendor-custom.js"],"names":[],"mappingsvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrjlJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"page.js","sourcesContent":["Vue.component('items-all', {\n    name: 'allItems',\n    el: function () {\n        return '#items-all';\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            items: [],\n            itemsFilterDropdown: false,\n            filterOptions: [\n                {\n                    value: 'brand',\n                    label: 'Brand'\n                },\n                {\n                    value: 'name',\n                    label: 'Name'\n                },\n                {\n                    value: 'project',\n                    label: 'Project'\n                }\n            ],\n            filter: '',\n            filterValue: '',\n            response: {},\n            queryParams: {\n                brand: '',\n                name: '',\n                project: ''\n            },\n            searchTerm: '',\n            sort: '',\n            order: '',\n            lastPage: '',\n            currentPage: '',\n            itemsPerPage: '',\n            ajaxObject: {}\n        };\n    },\n    computed: {\n        hasItems: function() {\n            return !_.isEmpty(this.items);\n        }\n    },\n    methods: {\n        setLoadQuery: function () {\n            var currentQuery = window.location.href.split('?')[1];\n\n            return currentQuery\n        },\n        getCompanyItems: function (query) {\n            var self = this;\n            var url = query ? '/api/items?' + query : '/api/items';\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            self.ajaxObject = $.ajax({\n                url: url,\n                method: 'GET',\n                success: function (response) {\n                    self.response = response;\n                    self.items = _.omit(response.data, 'query_parameters');\n\n                    self.queryParams = {};\n                    _.forEach(response.data.query_parameters, function (value, key) {\n                        self.queryParams[key] = value;\n                    });\n\n                    self.searchTerm = response.data.query_parameters.search;\n                    self.sort = response.data.query_parameters.sort;\n                    self.order = response.data.query_parameters.order;\n\n                    // push state (if query is different from url)\n                    pushStateIfDiffQuery(query);\n\n                    // Scrolltop\n                    document.getElementById('body-content').scrollTop = 0;\n\n                    self.ajaxReady = true;\n                },\n                error: function (err) {\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        addItemsFilter: function () {\n            var queryObj = {\n                page: 1\n            };\n            queryObj[this.filter] = this.filterValue;\n            this.getCompanyItems(updateQueryString(queryObj));\n\n            // reset filter values\n            this.filter = '';\n            this.filterValue = '';\n\n            // hide dropdown\n            this.itemsFilterDropdown = false;\n\n        },\n        removeFilter: function (type) {\n            var queryObj = {\n                page: 1\n            };\n            queryObj[type] = null;\n            this.getCompanyItems(updateQueryString(queryObj));\n        },\n        searchItemQuery: function () {\n            var self = this;\n\n            if (self.ajaxObject && self.ajaxObject.readyState != 4) self.ajaxObject.abort();\n\n            if (self.searchTerm) {\n                self.getCompanyItems(updateQueryString({\n                    search: self.searchTerm,\n                    page: 1\n                }));\n            } else {\n                self.getCompanyItems(updateQueryString({\n                    search: null,\n                    page: 1\n                }));\n            }\n\n        },\n        changeSort: function (sort) {\n            if (this.sort === sort) {\n                var newOrder = (this.order === 'asc') ? 'desc' : 'asc';\n                this.getCompanyItems(updateQueryString('order', newOrder));\n            } else {\n                this.getCompanyItems(updateQueryString({\n                    sort: sort,\n                    order: 'asc',\n                    page: 1\n                }));\n            }\n        },\n        getItemProjects: function (item) {\n            // Parses out project names from an Item's Purchase Requests\n            var projects = [];\n            _.forEach(item.purchase_requests, function (pr) {\n                if (projects.indexOf(pr.project.name) === -1)projects.push(pr.project);\n            });\n            return projects;\n        },\n        removeAllFilters: function() {\n            var self = this;\n            var queryObj = {};\n            _.forEach(self.filterOptions, function (option) {\n                queryObj[option.value] = null;\n            });\n            this.getCompanyItems(updateQueryString(queryObj));\n\n        },\n        clearSearch: function() {\n            this.searchTerm = '';\n            this.searchItemQuery();\n        }\n    },\n    events: {},\n    ready: function () {\n\n        this.getCompanyItems(this.setLoadQuery());\n        onPopQuery(this.getCompanyItems);\n\n    }\n});","Vue.component('item-single', {\n    name: 'itemSingle',\n    el: function () {\n        return '#item-single'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            photos: [],\n            fileErrors: []\n        };\n    },\n    props: ['itemId'],\n    computed: {},\n    methods: {\n        deletePhoto: function(photo) {\n            var self = this;\n            if(!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/items/' + self.itemId + '/photo/' + photo.id,\n                method: 'DELETE',\n                success: function(data) {\n                   // success\n                    console.log(data);\n                   self.photos = _.reject(self.photos, photo);\n                   self.ajaxReady = true;\n                },\n                error: function(response) {\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        clearErrors: function() {\n            this.fileErrors = [];\n        }\n    },\n    events: {},\n    ready: function () {\n\n        var self = this;\n\n        // Fetch item photos\n        $.ajax({\n            url: '/api/items/' + self.itemId,\n            method: 'GET',\n            success: function(data) {\n               // success\n                self.photos = data.photos\n            },\n            error: function(response) {\n                console.log(response);\n            }\n        });\n\n        new Dropzone(\"#item-photo-uploader\", {\n            autoProcessQueue: true,\n            maxFilesize: 5,\n            acceptedFiles: 'image/*',\n            previewTemplate: '<div class=\"dz-image-row\">' +\n            '                       <div class=\"dz-image\">' +\n            '                           <img data-dz-thumbnail>' +\n            '                       </div>' +\n            '                       <div class=\"dz-file-details\">' +\n            '                           <div class=\"name-status\">' +\n            '                               <span data-dz-name class=\"file-name\"></span>' +\n            '                               <div class=\"dz-success-mark status-marker\"><span>✔</span></div>' +\n            '                               <div class=\"dz-error-mark status-marker\"><span>✘</span></div>' +\n            '                           </div>' +\n            '                           <span class=\"file-size\" data-dz-size></span>' +\n            '                           <div class=\"dz-progress progress\">' +\n            '                               <span class=\"dz-upload progress-bar progress-bar-striped active\" data-dz-uploadprogress></span>' +\n            '                           </div>' +\n            '                       </div>' +\n            '                </div>',\n            init: function () {\n                this.on(\"complete\", function (file) {\n                    setTimeout(function () {\n                        this.removeFile(file);\n                    }.bind(this), 5000);\n                });\n                this.on(\"success\", function (files, response) {\n                    // Upload was successful, receive response\n                    // of Photo Model back from the server.\n                    self.photos.push(response);\n                });\n                this.on(\"error\", function (file, err) {\n                    if(typeof err === 'object') {\n                        _.forEach(err.file, function (error) {\n                            self.fileErrors.push(file.name + ': ' + error);\n                        });\n                    } else {\n                        self.fileErrors.push(file.name + ': ' + err);\n                    }\n                });\n            }\n        });\n    }\n});","Vue.component('add-line-item', {\n    name: 'addLineItem',\n    el: function () {\n        return '#add-line-item';\n    },\n    data: function () {\n        return {\n            purchaseRequests: [],\n            selectedPurchaseRequest: '',\n            quantity: '',\n            price: '',\n            payable: '',\n            delivery: '',\n            canAjax: true,\n            field: '',\n            order: '',\n            urgent: ''\n        };\n    },\n    ready: function () {\n        var self = this;\n        $.ajax({\n            method: 'GET',\n            url: '/api/purchase_requests/available',\n            success: function (data) {\n                self.purchaseRequests = data;\n            }\n        });\n    },\n    methods: {\n        selectPurchaseRequest: function ($selected) {\n            this.selectedPurchaseRequest = $selected;\n        },\n        removeSelectedPurchaseRequest: function () {\n            this.selectedPurchaseRequest = '';\n            this.quantity = '';\n            this.price = '';\n            this.payable = '';\n            this.delivery = '';\n        },\n        addLineItem: function () {\n            var self = this;\n            if (self.canAjax) {\n                self.canAjax = false;\n                $.ajax({\n                    url: '/purchase_orders/add_line_item',\n                    method: 'POST',\n                    data: {\n                        purchase_request_id: self.selectedPurchaseRequest.id,\n                        quantity: self.quantity,\n                        price: self.price,\n                        payable: moment(self.payable, \"DD/MM/YYYY\").format(\"YYYY-MM-DD H:mm:ss\"),\n                        delivery: moment(self.delivery, \"DD/MM/YYYY\").format(\"YYYY-MM-DD H:mm:ss\")\n                    },\n                    success: function (data) {\n                        window.location = '/purchase_orders/submit';\n                    },\n                    error: function (res, status, error) {\n                        console.log(res);\n                        self.canAjax = true;\n                    }\n                });\n            }\n        },\n        changeSort: function ($newField) {\n            if (this.field == $newField) {\n                this.order = (this.order == '') ? -1 : '';\n            } else {\n                this.field = $newField;\n                this.order = ''\n            }\n        },\n        toggleUrgent: function () {\n            this.urgent = (this.urgent) ? '' : 1;\n        }\n    },\n    computed: {\n        subtotal: function () {\n            return this.quantity * this.price;\n        },\n        validQuantity: function () {\n            return (this.selectedPurchaseRequest.quantity >= this.quantity && this.quantity > 0);\n        },\n        canAddPurchaseRequest: function () {\n            return (!!this.selectedPurchaseRequest && !!this.quantity & !!this.price && !!this.payable && !!this.delivery && this.validQuantity)\n        }\n    }\n});\n\n\n","Vue.component('projects-add-team', {\n    name: 'projectAddTeam',\n    el: function() {\n        return '#projects-team-add'\n    },\n    data: function() {\n        return {\n        };\n    },\n    props: [],\n    computed: {\n\n    },\n    methods: {\n\n    },\n    events: {\n\n    },\n    ready: function() {\n    }\n});","Vue.component('projects-all', {\n    name: 'projectsAll',\n    el: function () {\n        return '#projects-all'\n    },\n    data: function () {\n        return {\n            projects: [],\n            popupVisible: true,\n            projectToDelete: {},\n            ajaxReady: true\n        };\n    },\n    props: [],\n    computed: {},\n    methods: {\n        deleteProject: function (project) {\n            this.projectToDelete = project;\n\n            var settings = {\n                title: 'Confirm Delete ' + project.name,\n                body: 'Deleting a Project is permanent and cannot be reversed. Deleting a project will mean Team Members (staff) who are a part of the project will no longer receive notifications or perform actions for the Project. If you started the Project again, you will have to re-add all Team Members individually.',\n                buttonText: 'Permanently Remove ' + project.name,\n                buttonClass: 'btn btn-danger',\n                callbackEventName: 'remove-project'\n            };\n            this.$broadcast('new-modal', settings);\n        }\n    },\n    events: {\n        'remove-project': function () {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/projects/' + self.projectToDelete.id,\n                method: 'DELETE',\n                success: function (data) {\n                    // success\n                    self.projects = _.reject(self.projects, self.projectToDelete);\n                    flashNotify('success', 'Permanently Deleted ' + self.projectToDelete.name);\n                    self.projectToDelete = {};\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    ready: function () {\n\n        // Fetch projects\n        var self = this;\n        $.ajax({\n            url: '/api/projects',\n            method: 'GET',\n            success: function(data) {\n               // success\n               self.projects = data;\n            },\n            error: function(response) {\n            }\n        });\n\n        // Popup Stuff\n            // Bind click\n            $(document).on('click', '.button-project-dropdown', function (e) {\n                e.stopPropagation();\n\n                $('.button-project-dropdown.active').removeClass('active');\n                $(this).addClass('active');\n\n                $('.project-popup').hide();\n                $(this).next('.project-popup').show();\n            });\n\n            // To hide popup\n            $(document).click(function (event) {\n                if (!$(event.target).closest('.project-popup').length && !$(event.target).is('.project-popup')) {\n                    $('.button-project-dropdown.active').removeClass('active');\n                    $('.project-popup').hide();\n                }\n            });\n\n    }\n});","Vue.component('project-single', {\n    name: 'projectSingle',\n    el: function() {\n        return '#project-single-view'\n    },\n    data: function() {\n        return {\n            ajaxReady: true,\n            teamMembers: [],\n            tableHeaders: [\n                {\n                    label: 'Name',\n                    path: ['name'],\n                    sort: 'name'\n                },\n                {\n                    label: 'Role',\n                    path: ['role', 'position'],\n                    sort: 'role.position'\n                },\n                {\n                    label: 'Email',\n                    path: ['email'],\n                    sort: 'email'\n                }\n            ]\n        };\n    },\n    props: [],\n    computed: {\n    },\n    methods: {\n\n    },\n    events: {\n    },\n    ready: function() {\n        var self = this;\n        if(!self.ajaxReady) return;\n        self.ajaxReady = false;\n        $.ajax({\n            url: '/api/projects/' + $('#hidden-project-id').val() +'/team',\n            method: '',\n            success: function(data) {\n               // success\n               self.teamMembers = data;\n               self.ajaxReady = true;\n            },\n            error: function(response) {\n                console.log(response);\n                self.ajaxReady = true;\n            }\n        });\n    }\n});","Vue.component('purchase-orders-all',{\n    name: 'allPurchaseOrders',\n    el: function() {\n        return '#purchase-orders-all';\n    },\n    data: function() {\n        return {\n            purchaseOrders: [],\n            headings: [\n                ['created_at', 'Date Submitted'],\n                ['project.name', 'Project'],\n                ['', 'Item(s)'],\n                ['total', 'OrderTotal'],\n                ['', 'Status'],\n                ['', 'Paid'],\n                ['', 'Delivered']\n            ],\n            statuses: [\n                {\n                    key: 'pending',\n                    label: 'Pending'\n                },\n                {\n                    key: 'approved',\n                    label: 'Approved'\n                },\n                {\n                    key: 'rejected',\n                    label: 'Rejected'\n                },\n                {\n                    key: '',\n                    label: 'All'\n                }\n            ],\n            field: '',\n            order: '',\n            urgent: '',\n            filter: 'pending'\n        };\n    },\n    ready: function () {\n        var self = this;\n        $.ajax({\n            url: '/api/purchase_orders',\n            method: 'GET',\n            success: function (data) {\n                self.purchaseOrders = data;\n            },\n            error: function (data) {\n                console.log(data);\n            }\n        });\n    },\n    methods: {\n        changeSort: function ($newField) {\n            if (this.field == $newField) {\n                this.order = (this.order == '') ? -1 : '';\n            } else {\n                this.field = $newField;\n                this.order = ''\n            }\n        },\n        checkUrgent: function (purchaseOrder) {\n            // takes a purchaseOrder and sees\n            // if there are any PR's with urgent tags\n            var urgent = false;\n            _.forEach(purchaseOrder.line_items, function (item) {\n                if (item.purchase_request.urgent) {\n                    urgent = true;\n                }\n            });\n            return urgent;\n        },\n        changeFilter: function (filter) {\n            this.filter = filter;\n        },\n        toggleUrgent: function () {\n            this.urgent = (this.urgent) ? '' : 1;\n        },\n        loadSinglePO: function (POID) {\n            window.document.location = '/purchase_orders/single/' + POID;\n        },\n        checkProperty: function (purchaseOrder, property) {\n            var numLineItems = purchaseOrder.line_items.length;\n            var numTrueForProperty = 0;\n            _.forEach(purchaseOrder.line_items, function (item) {\n                item[property] ? numTrueForProperty++ : '';\n            });\n            if (numLineItems == numTrueForProperty) {\n                return true;\n            }\n        }\n    }\n});","Vue.component('purchase-orders-submit', {\n    el: function () {\n        return '#purchase-orders-submit';\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            ajaxObject: {},\n            response: {},\n            projects: [],\n            projectID: '',\n            purchaseRequests: [],\n            sort: '',\n            order: '',\n            urgent: '',\n            searchTerm: '',\n            selectedPRs: []\n        };\n    },\n    computed: {\n        hasPurchaseRequests: function() {\n            return ! _.isEmpty(this.purchaseRequests);\n        }\n    },\n    methods: {\n        fetchPurchaseRequests: function (projectID, sort, order, page, search) {\n            var self = this;\n\n            sort = sort || 'number';\n            order = order || 'asc';\n            search = search || '';\n\n            var url = '/api/purchase_requests?' +\n                'state=open' +\n                '&quantity=1+' +\n                '&project_id=' + projectID +\n                '&sort=' + sort +\n                '&order=' + order +\n                '&per_page=3' +\n                '&search=' + search;\n\n            if(page) url += '&page=' + page;\n            \n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            self.ajaxObject = $.ajax({\n                url: url,\n                method: 'GET',\n                success: function (response) {\n                    // Update data\n                    self.response = response;\n\n                    self.purchaseRequests = _.omit(response.data, 'query_parameters');\n\n                    // Pull flags from response (better than parsing url)\n                    self.sort = response.data.query_parameters.sort;\n                    self.order = response.data.query_parameters.order;\n                    self.urgent = response.data.query_parameters.urgent;\n\n                    self.ajaxReady = true;\n\n                    // self.$nextTick(function() {\n                    //     self.finishLoading = true;\n                    // })\n                    // TODO ::: Add a loader for each request\n\n                },\n                error: function (res, status, req) {\n                    console.log(status);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        changeSort: function (sort) {\n            if (this.sort === sort) {\n                var newOrder = (this.order === 'asc') ? 'desc' : 'asc';\n                this.fetchPurchaseRequests(this.projectID, this.sort, newOrder);\n            } else {\n                this.fetchPurchaseRequests(this.projectID, sort, 'asc');\n            }\n        },\n        searchPurchaseRequests: function() {\n            var self = this;\n\n            if (self.ajaxObject && self.ajaxObject.readyState != 4) self.ajaxObject.abort();\n\n            self.fetchPurchaseRequests(self.projectID, self.sort, self.order, 1, self.searchTerm);\n        },\n        clearSearch: function() {\n            this.searchTerm = '';\n            this.searchPurchaseRequests();\n        },\n        selectPR: function(purchaseRequest) {\n            this.alreadySelectedPR(purchaseRequest) ? this.selectedPRs = _.reject(this.selectedPRs, purchaseRequest) : this.selectedPRs.push(purchaseRequest) ;\n        },\n        alreadySelectedPR: function(purchaseRequest) {\n            return _.find(this.selectedPRs, function(pr) {\n                return pr.id === purchaseRequest.id;\n            });\n        }\n    },\n    events: {\n        'go-to-page': function (page) {\n            this.fetchPurchaseRequests(this.projectID, this.sort, 'asc', page);\n        }\n    },\n    ready: function () {\n        this.$watch('projectID', function (val) {\n            if (val)this.fetchPurchaseRequests(val);\n        });\n    }\n});","Vue.component('purchase-requests-all', {\n    name: 'allPurchaseRequests',\n    el: function () {\n        return '#purchase-requests-all';\n    },\n    data: function () {\n        return {\n            response: {},\n            purchaseRequests: [],\n            order: '',\n            urgent: '',\n            state: '',\n            filter: '',\n            sort: '',\n            showStatesDropdown: false,\n            showFiltersDropdown: false,\n\n            filterValue: '',\n            minFilterValue: ' ',\n            maxFilterValue: ' ',\n\n            activeFilters: {\n               number_filter_integer: '',\n                project: '',\n                quantity_filter_integer: '',\n                item_brand: '',\n                item_name: ''\n            },\n\n            filterOptions: [\n                {\n                    value: 'number',\n                    label: '# Number'\n                },\n                {\n                    value: 'project_id',\n                    label: 'Project'\n                },\n                {\n                    value: 'quantity',\n                    label: 'Quantity'\n                },\n                {\n                    value: 'item_brand',\n                    label: 'Item - Brand'\n                },\n                {\n                    value: 'item_name',\n                    label: 'Item - Name'\n                },\n                {\n                    value: 'due',\n                    label: 'Due Date'\n                },\n                {\n                    value: 'requested',\n                    label: 'Requested Date'\n                },\n                {\n                    value: 'user_id',\n                    label: 'Requester'\n                }\n            ],\n            states: [\n                {\n                    name: 'open',   // What gets sent to server\n                    label: 'Open'   // Displayed to client\n                },\n                {\n                    name: 'complete',\n                    label: 'Completed'\n                },\n                {\n                    name: 'cancelled',\n                    label: 'Cancelled'\n                },\n                {\n                    name: 'all',\n                    label: 'All Statuses'\n                }\n            ],\n            ajaxReady: true,\n            finishLoading: false\n        };\n    },\n    computed: {},\n    methods: {\n        setLoadQuery: function () {\n            // The currenty query\n            var currentQuery = window.location.href.split('?')[1];\n            // If state set - use query. Else - set a default for the state\n            currentQuery = getParameterByName('state') ? currentQuery : updateQueryString('state', 'open');\n            return currentQuery;\n        },\n        fetchPurchaseRequests: function (query) {\n            var url = query ? '/api/purchase_requests?' + query : '/api/purchase_requests';\n            var self = this;\n\n            // self.finishLoading = false;\n\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: url,\n                method: 'GET',\n                success: function (response) {\n                    // Update data\n                    self.response = response;\n                    self.purchaseRequests = _.omit(response.data, 'query_parameters');\n\n                    // Pull flags from response (better than parsing url)\n                    self.state = response.data.query_parameters.state;\n                    self.sort = response.data.query_parameters.sort;\n                    self.order = response.data.query_parameters.order;\n                    self.urgent = response.data.query_parameters.urgent;\n\n                    // Attach filters\n                        // Reset obj\n                        self.activeFilters = {};\n                        // Loop through and attach everything (Only pre-defined keys in data obj above will be accessible with Vue)\n                        _.forEach(response.data.query_parameters, function (value, key) {\n                            self.activeFilters[key] = value;\n                        });\n\n\n                    // push state (if query is different from url)\n                    pushStateIfDiffQuery(query);\n\n                    document.getElementById('body-content').scrollTop = 0;\n                    \n                    self.ajaxReady = true;\n\n                    // self.$nextTick(function() {\n                    //     self.finishLoading = true;\n                    // })\n                    // TODO ::: Add a loader for each request\n\n                },\n                error: function (res, status, req) {\n                    console.log(status);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        changeState: function (state) {\n            this.state = state;\n            this.showStatesDropdown = false;\n            this.fetchPurchaseRequests(updateQueryString({\n                state: state.name,\n                page: 1\n            }));\n        },\n        toggleUrgentOnly: function () {\n            var urgent = this.urgent ? 0 : 1;\n            this.fetchPurchaseRequests(updateQueryString({\n                state: this.state, // use same state\n                page: 1, // Reset to page 1\n                urgent: urgent\n            }));\n        },\n        changeSort: function (sort) {\n            if (this.sort === sort) {\n                var newOrder = (this.order === 'asc') ? 'desc' : 'asc';\n                this.fetchPurchaseRequests(updateQueryString('order', newOrder));\n            } else {\n                this.fetchPurchaseRequests(updateQueryString({\n                    sort: sort,\n                    order: 'asc',\n                    page: 1\n                }));\n            }\n        },\n        removeFilter: function (type) {\n            var queryObj = {\n                page: 1\n            };\n            queryObj[type] = null;\n            this.fetchPurchaseRequests(updateQueryString(queryObj))\n        },\n        addPRsFilter: function() {\n            var self = this;\n            var value = self.filterValue || [self.minFilterValue, self.maxFilterValue];\n\n            self.fetchPurchaseRequests(updateQueryString(self.filter, value));\n\n            // Reset values\n            this.filter = '';\n            this.filterValue = '';\n            this.minFilterValue = ' ';\n            this.maxFilterValue = ' ';\n\n            // Hide dropdown\n            this.showFiltersDropdown = false;\n        },\n        removeAllFilters: function() {\n            var self = this;\n            var queryObj = {};\n            _.forEach(self.filterOptions, function (option) {\n                queryObj[option.value] = null;\n            });\n            this.fetchPurchaseRequests(updateQueryString(queryObj));\n        }\n    },\n    ready: function () {\n        // If exists\n        this.fetchPurchaseRequests(this.setLoadQuery());\n\n        onPopQuery(this.fetchPurchaseRequests);\n    }\n});","Vue.component('purchase-requests-make', {\n    name: 'makePurchaseRequest',\n    el: function () {\n        return '#purchase-requests-add';\n    },\n    data: function () {\n        return {\n            pageReady: false,\n            ajaxReady: true,\n            projectID: '',\n            itemID: '',\n            quantity: '',\n            due: '',\n            urgent: ''\n        };\n    },\n    methods: {\n        submitMakePRForm: function () {\n            var self = this;\n\n\n            // Send Req. via Ajax\n            vueClearValidationErrors(self);\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/purchase_requests/make',\n                method: 'POST',\n                data: {\n                    'project_id': self.projectID,\n                    'item_id': self.itemID,\n                    'quantity': self.quantity,\n                    'due': self.due,\n                    'urgent': (self.urgent) ? 1 : 0\n                },\n                success: function (data) {\n                    // success\n                    console.log(data);\n                    console.log('success!');\n                    flashNotifyNextRequest('success', 'Made a new Purchase Request');\n                    window.location.href = \"/purchase_requests\";\n                },\n                error: function (response) {\n                    console.log(response);\n\n                    vueValidation(response, self);\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    computed: {\n\n    },\n    ready: function () {\n        var self = this;\n\n        $('#pr-item-selection').selectize({\n            valueField: 'id',\n            searchField: ['sku', 'brand', 'name'],\n            create: false,\n            placeholder: 'Search by SKU, Brand or Name',\n            render: {\n                option: function (item, escape) {\n\n                    var sku = (item.sku) ? escape(item.sku) : '';\n                    var brand = (item.brand) ? escape(item.brand) + ' - ' : '';\n                    var image = (item.photos[0]) ? ('<img src=\"' + escape(item.photos[0].thumbnail_path) + '\">') : '<i class=\"fa fa-image\"></i>';\n\n                    return '<div class=\"item-single-option\">' +\n                        '       <div class=\"item-thumbnail\">' +\n                                    image +\n                        '       </div>' +\n                        '       <div class=\"details\">' +\n                        '           <span class=\"brand\">' + brand + '</span>' +\n                        '           <span class=\"name\">' + escape(item.name) + '</span>' +\n                        '           <span class=\"sku\">' + sku + '</span>' +\n                        '       </div>' +\n                        '</div>';\n                },\n                item: function (item, escape) {\n\n                    var sku = (item.sku) ? escape(item.sku) : '';\n                    var brand = (item.brand) ? escape(item.brand) + ' - ' : '';\n                    var image = (item.photos[0]) ? ('<img src=\"' + escape(item.photos[0].thumbnail_path) + '\">') : '<i class=\"fa fa-image\"></i>';\n                    var imageGallery =  '';\n                    if(item.photos.length > 0) {\n                        imageGallery += '<ul class=\"item-images list-unstyled\">';\n                        for(var i = 0 ; i < item.photos.length; i++) {\n                            imageGallery += '<li class=\"item-select-image\"><a class=\"fancybox\" rel=\"group\" href=\"' + escape(item.photos[i].path) + '\"><img src=\"' + escape(item.photos[i].thumbnail_path) + '\" alt=\"\" /></a></li>'\n                        }\n                        imageGallery += '</ul>';\n                    }\n\n                    return '<div class=\"item-selected\">' +\n                        '       <div class=\"item-thumbnail\">' +\n                                    image +\n                        '       </div>' +\n                        '       <div class=\"details\">' +\n                        '           <span class=\"brand\">' + brand + '</span>' +\n                        '           <span class=\"name\">' + escape(item.name) + '</span>' +\n                        '           <span class=\"sku\">' + sku + '</span>' +\n                        '           <span class=\"specification\">' + escape(item.specification) + '</span>' +\n                        '       </div>' +\n                                imageGallery +\n                        '</div>'\n                }\n            },\n            load: function (query, callback) {\n                if (!query.length) return callback();\n                $.ajax({\n                    url: '/api/items/search/' + encodeURIComponent(query),\n                    type: 'GET',\n                    error: function () {\n                        callback();\n                    },\n                    success: function (res) {\n                        console.log(res);\n                        callback(res);\n                    }\n                });\n            },\n            onChange: function (value) {\n                self.itemID = value;\n            }\n    });\n\n        self.$nextTick(function () {\n            self.pageReady = true;\n        });\n    }\n});\n\n","Vue.component('settings', {\n    name: 'Settings',\n    el: function () {\n        return '#system-settings';\n    },\n    data: function () {\n        return {\n            settingsView: 'company',\n            navLinks: [\n                {\n                    label: 'Company',\n                    section: 'company'\n                },\n                {\n                    label: 'Permissions',\n                    section: 'permissions'\n                },\n                {\n                    label: 'Rules',\n                    section: 'rules'\n                }\n            ],\n            roles: []   // shared with Permissions, Rules\n        }\n    },\n    props: ['user'],\n    methods: {\n        changeView: function (view) {\n            this.settingsView = view;\n        }\n    },\n    components: {\n        settingsCompany: 'settings-company',\n        settingsPermissions: 'settings-permissions',\n        settingsRules: 'settings-rules'\n    }\n});\n","Vue.component('team-all', {\n    name: 'teamAll',\n    el: function() {\n        return '#team-all'\n    },\n    data: function() {\n        return {\n            employees: [],\n            tableHeaders: [\n                {\n                    label: 'Name',\n                    path: ['name'],\n                    sort: 'name'\n                },\n                {\n                    label: 'Role',\n                    path: ['role', 'position'],\n                    sort: 'role.position'\n                },\n                {\n                    label: 'Email',\n                    path: ['email'],\n                    sort: 'email'\n                },\n                {\n                    label: 'Status',\n                    path: ['status'],\n                    sort: 'status'\n                }\n            ]\n        };\n    },\n    props: ['user'],\n    computed: {\n        \n    },\n    methods: {\n        \n    },\n    events: {\n        \n    },\n    ready: function() {\n        var self = this;\n        $.ajax({\n            url: '/api/team',\n            method: 'GET',\n            success: function(data) {\n               // success\n               self.employees = _.map(data, function(staff) {\n                   staff.name = '<a href=\"/team/user/' + staff.id + '\">' + staff.name + '</a>';\n                   staff.status = staff.invite_key ? '<span class=\"badge badge-warning\">Pending</span>' : '<span class=\"badge badge-success\">Confirmed</span>';\n                   return staff;\n               });\n            },\n            error: function(response) {\n                console.log(response);\n            }\n        });\n    }\n});","Vue.component('team-single-user', {\n    name: 'teamSingleUser',\n    el: function() {\n        return '#team-single-user'\n    },\n    data: function() {\n        return {\n            roles: [],\n            changeButton: false,\n            userToDelete: {},\n            ajaxReady: true\n        };\n    },\n    props: [],\n    computed: {\n\n    },\n    methods: {\n        showChangeButton: function() {\n            this.changeButton = true;\n        },\n        confirmDelete: function(user) {\n            this.userToDelete = user;\n            this.$broadcast('new-modal', {\n                title: 'Confirm Permanently Delete ' + user.name,\n                body: 'Deleting a User is immediate and permanent. All data regarding the User will automatically be removed. This action is irreversible. Any pending actions may become incompletable.',\n                buttonText: 'Delete ' + user.name + ' and all corresponding data',\n                buttonClass: 'btn-danger',\n                callbackEventName: 'delete-user'\n            });\n        }\n    },\n    events: {\n        'delete-user': function() {\n            var self = this;\n            if(!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/team/user/' + self.userToDelete.id,\n                method: 'DELETE',\n                success: function(data) {\n                   // success\n                   self.ajaxReady = true;\n                    window.location.href = '/team';\n                },\n                error: function(response) {\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    ready: function() {\n        var self = this;\n    }\n});","Vue.component('vendors-add-new', {\n    name: 'addNewVendor',\n    el: function() {\n        return '#vendors-add-new'\n    },\n    data: function() {\n        return {\n            navLinks: [ 'search', 'custom'],\n            currentTab: 'search'\n        };\n    },\n    props: [],\n    computed: {\n\n    },\n    methods: {\n        changeTab: function (tab) {\n            this.currentTab = tab;\n        }\n    },\n    events: {\n\n    },\n    ready: function() {\n\n    }\n});","Vue.component('vendor-requests', {\n    name: 'vendorRequests',\n    el: function() {\n        return '#vendor-requests'\n    },\n    data: function() {\n        return {\n            ajaxReady: true,\n            pendingVendors: []\n        };\n    },\n    props: [],\n    computed: {\n        \n    },\n    methods: {\n        respondRequest: function(vendor, action) {\n            var self = this;\n            if(!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/vendors/' + vendor.id + '/request/' + action,\n                method: 'POST',\n                success: function(data) {\n                   // success\n                    self.pendingVendors = _.reject(self.pendingVendors, vendor);\n                    if(action === 'verify') flashNotify('success', 'Verified vendor request');\n                   self.ajaxReady = true;\n                },\n                error: function(response) {\n                    console.log(response);\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    events: {\n        \n    },\n    ready: function() {\n        // Fetch Companies that have pending Vendor requests to user's\n        var self = this;\n        $.ajax({\n            url: '/api/vendors/pending_requests',\n            method: 'GET',\n            success: function(data) {\n               self.pendingVendors = data;\n            },\n            error: function(response) {\n                console.log(response);\n            }\n        });\n    }\n});","Vue.component('vendor-single', {\n    name: 'vendorSingle',\n    el: function () {\n        return '#vendor-single'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            vendorID: '',\n            vendor: {},\n            description: '',\n            editDescription: false,\n            savedDescription: '',\n            showAddBankAccountForm: false,\n            accountName: '',\n            accountNumber: '',\n            bankName: '',\n            swift: '',\n            bankPhone: '',\n            bankAddress: '',\n            companyIDToLink: ''\n        };\n    },\n    props: [],\n    computed: {\n        vendorLink: function () {\n            if(this.vendor.linked_company_id) {\n                if(this.vendor.verified) return 'verified';\n                return 'pending';\n            }\n            return 'custom';\n        }\n    },\n    methods: {\n        startEditDescription: function () {\n            this.editDescription = true;\n            this.$nextTick(function () {\n                $editor = $('.description-editor');\n                $editor.focus();\n                autosize.update($editor);\n            });\n        },\n        saveDescription: function () {\n            this.editDescription = false;\n            this.savedDescription = 'saving';\n            var self = this;\n            if (!self.ajaxReady) {\n                self.savedDescription = 'error';\n                return;\n            }\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/vendors/' + self.vendorID + '/description',\n                method: 'POST',\n                data: {\n                    \"description\": self.description\n                },\n                success: function (data) {\n                    // success\n                    self.savedDescription = 'success';\n                    self.vendor.description = self.description;\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    self.savedDescription = 'error';\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        addressSetPrimary: function (address) {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/address/' + address.id + '/set_primary',\n                method: 'PUT',\n                success: function (data) {\n                    // success\n                    self.vendor.addresses = _.map(self.vendor.addresses, function (vendorAddress) {\n                        if (vendorAddress.id === address.id) {\n                            vendorAddress.primary = 1;\n                        } else {\n                            vendorAddress.primary = 0;\n                        }\n                        return vendorAddress;\n                    });\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log(response);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        removeAddress: function (address) {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/address/' + address.id,\n                method: 'DELETE',\n                success: function (data) {\n                    // success\n                    flashNotify('success', 'Removed address');\n                    self.vendor.addresses = _.reject(self.vendor.addresses, address);\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log(response);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        toggleAddBankAccountForm: function () {\n            this.showAddBankAccountForm = !this.showAddBankAccountForm;\n        },\n        addBankAccount: function () {\n            var self = this;\n            vueClearValidationErrors(self);\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/vendors/' + self.vendorID + '/bank_accounts',\n                method: 'POST',\n                data: {\n                    \"account_name\": self.accountName,\n                    \"account_number\": self.accountNumber,\n                    \"bank_name\": self.bankName,\n                    \"swift\": self.swift,\n                    \"bank_phone\": self.bankPhone,\n                    \"bank_address\": self.bankAddress\n                },\n                success: function (data) {\n                    // Push to front\n                    self.vendor.bank_accounts.push(data);\n                    // Reset Fields\n                    self.accountName = '';\n                    self.accountNumber = '';\n                    self.bankName = '';\n                    self.swift = '';\n                    self.bankPhone = '';\n                    self.bankAddres = '';\n                    // hide add section\n                    self.showAddBankAccountForm = false;\n                    // Flash\n                    flashNotify('success', 'Added bank account to vendor')\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    flashNotify('error', 'Could not add bank account to vendor')\n                    vueValidation(response, self);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        bankSetPrimary: function(account) {\n            var self = this;\n            if(!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/vendors/' + self.vendorID + '/bank_accounts/' + account.id + '/set_primary',\n                method: 'POST',\n                success: function(data) {\n                    self.vendor.bank_accounts = _.map(self.vendor.bank_accounts, function (bankAccount) {\n                        if (bankAccount.id === account.id) {\n                            bankAccount.primary = 1;\n                        } else {\n                            bankAccount.primary = 0;\n                        }\n                        return bankAccount;\n                    });\n                   self.ajaxReady = true;\n                },\n                error: function(response) {\n                    flashNotify('error', 'Could not set Bank Account as primary');\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        deleteAccount: function (account) {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/vendors/' + self.vendor.id + '/bank_accounts/' + account.id,\n                method: 'DELETE',\n                success: function (data) {\n                    self.vendor.bank_accounts = _.reject(self.vendor.bank_accounts, account);\n                    flashNotify('success', 'Removed bank account');\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log(response);\n                    flashNotify('error', 'Could not remove bank account');\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        linkCompany: function() {\n            var self = this;\n            if(!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/vendors/link',\n                method: 'POST',\n                data: {\n                    \"vendor_id\": self.vendor.id,\n                    \"linked_company_id\": self.companyIDToLink\n                },\n                success: function(data) {\n                   // success\n                    flashNotify('success', 'Linked company to vendor');\n                    self.companyIDToLink = '';\n\n                    self.vendor = data;\n                   self.ajaxReady = true;\n                },\n                error: function(response) {\n                    console.log(response);\n                    \n                    vueValidation(response, self);\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    events: {\n        'address-added': function (address) {\n            this.vendor.addresses.push(address);\n        }\n    },\n    ready: function () {\n        var self = this;\n        $.ajax({\n            url: '/api/vendors/' + self.vendorID,\n            method: 'GET',\n            success: function (data) {\n                self.vendor = data;\n            },\n            error: function (response) {\n                console.log(response);\n            }\n        });\n    }\n});","Vue.component('settings-company', {\n    name: 'settingsCompany',\n    template: '',\n    el: function () {\n        return '#settings-company';\n    },\n    data: function() {\n        return {\n            ajaxReady: true,\n            company: false\n        }\n    },\n    props: [\n      'settingsView'\n    ],\n    computed: {\n        canUpdateCompany: function () {\n            if (this.company) {\n                return this.company.name.length > 0 && this.company.currency.length > 0;\n            }\n            return false;\n        }\n    },\n    methods: {\n        updateCompany: function () {\n            var self = this;\n            vueClearValidationErrors(self);\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/company',\n                method: 'PUT',\n                data: {\n                    name: self.company.name,\n                    description: self.company.description,\n                    currency: self.company.currency\n                },\n                success: function (data) {\n                    // success\n                    flashNotify('success', 'Updated Company information');\n                    self.$dispatch('update-company');\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                    vueValidation(response, self);\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    ready: function() {\n        var self = this;\n        // GET user company info\n        $.ajax({\n            url: '/api/company',\n            method: 'GET',\n            success: function (data) {\n                // success\n                self.company = data;\n            },\n            error: function (response) {\n                console.log('Request Error!');\n                console.log(response);\n            }\n        });\n\n    }\n});","Vue.component('settings-permissions', {\n    name: 'settingsPermissions',\n    el: function () {\n        return '#settings-permissions'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            roleToRemove: false,\n            roleSelect: '',\n            selectedRole: false,\n            editingRole: false,\n            editRolePosition: false,\n            roleToUpdate: {},\n            updatedRoleVal: ''\n        };\n    },\n    props: [\n        'roles',\n        'settingsView'\n    ],\n    computed: {},\n    methods: {\n        hasPermission: function (permission, role) {\n            return _.some(role.permissions, permission);\n        },\n        removePermission: function (permission, role) {\n            var self = this;\n            $.ajax({\n                url: '/api/roles/remove_permission',\n                method: 'POST',\n                data: {\n                    role: role,\n                    permission: permission\n                },\n                success: function () {\n                    // remove role from roles\n                    self.roles = _.reject(self.roles, role);\n                    // modify role\n                    role.permissions = _.reject(role.permissions, permission);\n                    // Add role back to roles\n                    self.roles.push(role);\n                },\n                error: function (response) {\n                    // error\n                    console.log('GET REQ Error!');\n                    console.log(response);\n                }\n            });\n        },\n        givePermission: function (permission, role) {\n            var self = this;\n            $.ajax({\n                url: '/api/roles/give_permission',\n                method: 'POST',\n                data: {\n                    role: role,\n                    permission: permission\n                },\n                success: function () {\n                    self.roles = _.reject(self.roles, role);\n                    role.permissions.push(permission);\n                    self.roles.push(role)\n                },\n                error: function (response) {\n                    // error\n                    console.log('GET REQ Error!');\n                    console.log(response);\n                }\n            });\n        },\n        addRole: function () {\n            var newRole = {};\n        },\n        setRemoveRole: function (role) {\n            this.$broadcast('new-modal', {\n                title: 'Permanently Remove ' + strCapitalize(role.position),\n                body: \"Removing a role is irreversible. Any team members that have those roles will lose all their permissions and won't be able to complete any tasks until you assign them a new role.\",\n                buttonClass: 'btn-danger',\n                buttonText: 'remove',\n                callbackEventName: 'remove-role'\n            });\n            this.roleToRemove = role;\n        },\n        removeRole: function () {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/roles/delete',\n                method: 'POST',\n                data: {\n                    role: self.roleToRemove\n                },\n                success: function (data) {\n                    // success\n                    self.roles = _.reject(self.roles, self.roleToRemove);\n                    // Remove from selectbox\n                    self.roleSelect.removeOption(self.roleToRemove.position);\n                    self.roleSelect.removeItem(self.roleToRemove.position, false);\n                    self.selectedRole = false;\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log('Error removing Role');\n                    if(response.status === 406) flashNotify('error', 'Can not remove Role with assigned Staff');\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        editRole: function (role) {\n            var self = this;\n            self.editingRole = role;\n            self.editRolePosition = role.position;\n            self.$nextTick(function () {\n                var $inputEdit = $('.input-editing-role');\n                $inputEdit.focus();\n                var blurFired = false; // blur fired flag\n                $inputEdit.keypress(function (e) {\n                    if (e.which == 13) {\n                        this.blur();\n                    }\n                });\n                $inputEdit.blur(function () {\n                    var newRoleVal = $inputEdit.val().toLowerCase();\n                    if (blurFired) return;\n                    blurFired = true;\n                    if (newRoleVal !== role.position && newRoleVal.length !== 0) {\n                        self.confirmEdit(role, newRoleVal);\n                    }\n                    self.editingRole = false;\n                    self.editRolePosition = false;\n\n                });\n            });\n\n        },\n        notEditing: function (role) {\n            return role !== this.editingRole;\n        },\n        confirmEdit: function (oldRole, newRoleVal) {\n            this.roleToUpdate = oldRole;\n            this.updatedRoleVal = newRoleVal;\n            this.$broadcast('new-modal', {\n                title: 'Confirm Edit ' + strCapitalize(this.editingRole.position) + ' to ' + strCapitalize(newRoleVal),\n                body: 'Role changes are immediate and will automatically effect all team members that have the role.',\n                buttonClass: 'btn-primary',\n                buttonText: 'update',\n                callbackEventName: 'update-role'\n            });\n        },\n        updateRole: function () {\n            var self = this;\n            $.ajax({\n                url: '/api/roles/' + self.roleToUpdate.id,\n                method: 'PUT',\n                data: {\n                    role: self.roleToUpdate,\n                    newPosition: self.updatedRoleVal\n                },\n                success: function (role) {\n                    self.roles = _.reject(self.roles, self.roleToUpdate);\n                    self.roles.push(role);\n\n                    self.roleSelect.updateOption(self.roleToUpdate.position, {\n                        value: role.position,\n                        text: strCapitalize(role.position)\n                    });\n\n                    // select new option\n                    if (self.selectedRole.position === self.roleToUpdate.position) self.selectedRole = role;\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                }\n            });\n        }\n    },\n    events: {\n        'remove-role': function () {\n            this.removeRole();\n        },\n        'update-role': function () {\n            this.updateRole();\n        }\n    },\n    ready: function () {\n        var self = this;\n\n        // GET company roles\n        $.ajax({\n            url: '/api/roles',\n            method: 'GET',\n            success: function (data) {\n                self.roles = data;\n            },\n            error: function (err) {\n                console.log(err);\n            }\n        });\n\n        var $addRoleLink = $('#link-add-role');\n\n        $addRoleLink.editable({\n            type: 'text',\n            mode: 'inline',\n            showbuttons: false,\n            placeholder: 'Position Title'\n        });\n\n        $addRoleLink.on('shown', function () {\n            setTimeout(function () {\n                $addRoleLink.editable('setValue', '');\n            }, 0);\n        });\n\n        $addRoleLink.on('hidden', function (e, reason) {\n            $addRoleLink.editable('setValue', 'Add New Role');\n        });\n\n        function saveRole(position, successFn, errorFn) {\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/roles',\n                method: 'POST',\n                data: {\n                    position: position\n                },\n                success: function (data) {\n                    self.roles.push(data);\n                    successFn ? successFn() : null;\n                    self.ajaxReady = true;\n                },\n                error: function (res) {\n                    console.log('Error: saving new role');\n                    console.log(res);\n                    errorFn ? errorFn() : null;\n                    self.ajaxReady = true;\n                }\n            });\n        }\n\n        self.roleSelect = uniqueSelectize('#select-settings-role', 'Select or type to add a new role');\n\n        $addRoleLink.on('save', function (e, params) {\n            self.roleSelect.addOption({\n                value: params.newValue,\n                text: params.newValue\n            });\n        });\n\n        self.roleSelect.on(\"option_add\", function (value, $item) {\n            self.roleSelect.updateOption(value, {\n                value: value,\n                text: strCapitalize(value)\n            });\n\n            saveRole(value, function () {\n                // success\n                self.selectedRole = _.find(self.roles, {position: value});\n            }, function () {\n                // error:\n                self.roleSelect.removeOption(value);\n            });\n        });\n\n        self.roleSelect.on(\"item_add\", function (value, $item) {\n            self.selectedRole = _.find(self.roles, {position: value});\n        });\n    }\n});\n","Vue.component('settings-rules', {\n    name: 'settingsRules',\n    el: function () {\n        return '#settings-rules'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            rules: [],\n            ruleProperties: [],\n            selectedProperty: false,\n            selectedTrigger: false,\n            selectedRuleRoles: [],\n            ruleLimit: '',\n            ruleToRemove: false\n        };\n    },\n    props: [\n        'user',\n        'roles',\n        'settingsView'\n    ],\n    computed: {\n        ruleHasLimit: function () {\n            return (this.selectedTrigger && this.selectedTrigger.has_limit);\n        },\n        canSubmitRule: function () {\n            if (this.ruleHasLimit) {\n                if (this.selectedRuleRoles) {\n                    return this.selectedProperty && this.selectedTrigger && this.selectedRuleRoles.length > 0 && this.ruleLimit > 0;\n                }\n                return false;\n            }\n            return this.selectedProperty && this.selectedTrigger && this.selectedRuleRoles.length > 0;\n        },\n        hasRules: function () {\n            return !_.isEmpty(this.rules);\n        }\n    },\n    methods: {\n        setTriggers: function () {\n            this.selectedTrigger = '';\n        },\n        addRule: function () {\n            var self = this;\n            var postData = {\n                rule_property_id: self.selectedProperty.id,\n                rule_trigger_id: self.selectedTrigger.id,\n                limit: self.ruleLimit,\n                roles: self.selectedRuleRoles\n            };\n            $.ajax({\n                url: '/api/rules',\n                method: 'POST',\n                data: postData,\n                success: function (data) {\n                    // success\n                    self.fetchRules();\n                    flashNotify('success', 'Successfully added a new Rule');\n                    self.resetRuleValues();\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                    self.resetRuleValues();\n                    if (response.status === 409) {\n                        flashNotify('error', 'Rule already exists');\n                    } else {\n                        flashNotify('error', 'Could not add Rule');\n                    }\n\n                }\n            });\n        },\n        resetRuleValues: function () {\n            this.ruleLimit = '';\n            this.selectedRuleRoles = [];\n        },\n        setRemoveRule: function (rule) {\n            this.ruleToRemove = rule;\n            this.$broadcast('new-modal', {\n                title: 'Confirm Remove Rule',\n                body: \"Removing a rule is irreversible. Any Pending (Unapproved) Purchase Orders that is waiting for the Rule to be approved may automatically be approved for processing.\",\n                buttonClass: 'btn-danger',\n                buttonText: 'remove',\n                callbackEventName: 'remove-rule'\n            });\n        },\n        removeRule: function () {\n            var self = this;\n            if (!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/api/rules/' + self.ruleToRemove.id + '/remove',\n                method: 'DELETE',\n                success: function (data) {\n                    // success\n                    self.fetchRules();\n                    self.ajaxReady = true;\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                    self.ajaxReady = true;\n                }\n            });\n        },\n        fetchRules: function () {\n            var self = this;\n            $.ajax({\n                url: '/api/rules',\n                method: 'GET',\n                success: function (data) {\n                    // success\n                    self.rules = data;\n                },\n                error: function (response) {\n                    console.log('Request Error!');\n                    console.log(response);\n                }\n            });\n        }\n    },\n    events: {\n        'remove-rule': function () {\n            this.removeRule();\n        }\n    },\n    ready: function () {\n        var self = this;\n\n        $.ajax({\n            url: '/api/rules/properties_triggers',\n            method: 'GET',\n            success: function (data) {\n                // success\n                self.ruleProperties = data;\n            },\n            error: function (response) {\n                console.log('Request Error!');\n                console.log(response);\n            }\n        });\n\n        self.fetchRules();\n    }\n});","Vue.component('vendor-add-search', {\n    name: 'vendorAddSearchCompany',\n    el: function () {\n        return '#vendor-add-search'\n    },\n    data: function () {\n        return {\n            ajaxReady: true,\n            linkedCompanyID: ''\n        };\n    },\n    props: ['currentTab'],\n    computed: {},\n    methods: {\n        addCompanyAsNewVendor: function() {\n            var self = this;\n            vueClearValidationErrors(self);\n            if(!self.ajaxReady) return;\n            self.ajaxReady = false;\n            $.ajax({\n                url: '/vendors/link',\n                method: 'POST',\n                data: {\n                    \"linked_company_id\": self.linkedCompanyID\n                },\n                success: function(data) {\n                   // success\n                    flashNotifyNextRequest('success', 'Sent request to link Company as a Vendor');\n                    location.href = \"/vendors\";\n                   self.ajaxReady = true;\n                },\n                error: function(response) {\n                    console.log(response);\n\n                    vueValidation(response, self);\n                    self.ajaxReady = true;\n                }\n            });\n        }\n    },\n    events: {},\n    ready: function () {\n    }\n});","Vue.component('vendor-add-custom', {\n    name: 'vendorAddCustom',\n    el: function() {\n        return '#vendor-add-custom'\n    },\n    data: function() {\n        return {\n        \n        };\n    },\n    props: ['currentTab'],\n    computed: {\n        \n    },\n    methods: {\n        \n    },\n    events: {\n        \n    },\n    ready: function() {\n\n    }\n});"],"sourceRoot":"/source/"}