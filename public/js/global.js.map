{"version":3,"sources":["helpers.js"],"names":[],"mappingsfile":"global.js","sourcesContent":["\n/**\n * Takes string and capitalizes the first letter\n * of each word.\n */\nfunction strCapitalize(str) {\n    return str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n}\n\n/**\n * Escapes html entities for a string to be inserted\n * into the DOM.\n *\n * @type {{&: string, <: string, >: string, \": string, ': string, /: string}}\n */\nvar entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    \"/\": '&#x2F;'\n};\n\n/**\n * Escapes a given string that has HTML elements.\n *\n * @param string\n * @returns {string}\n */\nfunction escapeHtml(string) {\n    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n        return entityMap[s];\n    });\n}\n\n/**\n * Takes an AJAX response and vue instance\n * and emits form errors to be caught by\n * 'form-errors' Vue Component.\n * \n * @param response\n * @param vue\n */\nfunction vueValidation(response, vue) {\n    if(response.status === 422) {\n        vue.$broadcast('new-errors', response.responseJSON);\n    }\n}\n\n/**\n * Broadcasts clear errors event.\n *\n * @param vue\n */\nfunction vueClearValidationErrors(vue) {\n    vue.$broadcast('clear-errors');\n}\n\n/**\n * Takes an string and tells you if it's a valid email!\n *\n * @returns {boolean}\n * @param string\n */\nfunction validateEmail(string) {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(string);\n}\n\n/**\n * Returns whether given string is all\n * alphanumeric (no symbols).\n *\n * @returns {boolean}\n * @param string\n */\nfunction alphaNumeric(string) {\n    var re = /^[A-Za-z\\d\\s]+$/;\n    return re.test(string);\n}\n\n/**\n * Retrieves the Query String Value by\n * Name\n * \n * @param name\n * @param url\n * @returns {*}\n */\nfunction getParameterByName(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\", \"i\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\n/**\n * Takes a 2 Strings (name, value) pair or an Object containing\n * several name-value pairs and updates the current query\n * and returns it.\n * \n * @returns {string}\n */\nfunction updateQueryString() {\n    // Get and prep existing query so we can make changes to it\n    var fullQuery = window.location.href.split('?')[1];         // into pairs\n    var queryArray = fullQuery ? fullQuery.split('&') : [];     // into key-values\n    var queryObj = {};                                          // empty object\n\n    // Build up object\n    queryArray.forEach(function (item) {\n        var x = item.split('=');\n        queryObj[x[0]] = x[1];\n    });\n\n    /**\n     * Make Updates to query\n     * TO DO ::: CHECK HERE\n     */\n    if (typeof arguments[0] === 'string' && arguments.length > 1) {\n        // Only update single query name - set the new name and value\n        queryObj[arguments[0]] = URIEncoder(arguments[1]);\n    } else if(typeof arguments[0] === 'object'){\n        // Received an object with key-value pairs of query names and value to update\n        _.forEach(arguments[0], function (value, key) {\n            if(value) {\n                queryObj[key] = URIEncoder(value);\n            } else {\n                delete queryObj[key];\n            }\n        });\n    } else {\n        // only received a key - delete from query\n        delete queryObj[arguments[0]];\n    }\n\n    // Make new query to return\n    var newQuery = '';\n    // Go through object and add everything back as a string\n    _.forEach(queryObj, function (value, name) {\n        newQuery += name + '=' + value + '&';\n    });\n    // Finally - return our new string!\n    return newQuery.substring(0, newQuery.length - 1);  // Trim last '&'\n}\n\n/**\n * Wrapper function for encodeURI that also accepts\n * an array and encodes each part before joining\n * them together with a '+'\n *\n * @param value\n * @returns {*}\n * @constructor\n */\nfunction URIEncoder(value) {\n    if(value.constructor === Array)  {\n        value = _.map(value, function (i) { if(i && i.replace(/\\s/g, \"\").length > 0) return encodeURI(i); }).join('+');\n    } else {\n        value = encodeURI(value)\n    }\n    return value;\n}\n\n/**\n * When browser has pop-state (ie back / forward)\n * run this function to re-retrieve the data\n *\n * @param callback\n */\nfunction onPopQuery(callback)\n{\n    window.onpopstate = function (e) {\n        if (e.state) {\n            callback(window.location.href.split('?')[1]);\n        }\n    }\n}\n\n/**\n * Takes a query string and if it is  different to\n * the current query string, it will update the\n * browsers state, so we can use nav buttons\n * \n * @param query\n */\nfunction pushStateIfDiffQuery(query) {\n    if (query !== window.location.href.split('?')[1]) {\n        window.history.pushState({}, \"\", '?' + query);\n    }\n}"],"sourceRoot":"/source/"}